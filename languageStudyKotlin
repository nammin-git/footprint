package com.example.mgproject

//1. Data Class
// 데이터를 담는 그릇
// pojo Class
// 모델이 되는 클래스라 틀만 있음

data class Ticket(val companyName : String, val passengerName : String, var date : String, var seatNumber : Int)
// toString(), hashCode(), equals(), copy() 컴파일 시 자동으로 만들어짐

class TicketNormal(val companyName : String, val passengerName : String, var date : String, var seatNumber : Int)



//2. Companion Method
// 자바의 Static 대신에 사용되는 것
// 정적인 메서드나 정적인 변수를 선언할 때 씀

// book이라는 클래스가 있고, book 이라는 객체를 만들어주는 factory 함수
class Book private constructor(val id: Int, val name : String){
    //private constructor >> 다른 곳에서는 객체 생성 못함

    companion object BookFactory : IdProvider{      //private property 나 method 를 읽어올 수 있게 해줌

        override fun getId(): Int {
            return 444
        }

        val myBook = "new book"

        fun create() = Book(getId(), myBook)
    }
}

//상속도 받을 수 있다
interface IdProvider {
    fun getId() : Int
}



//3. Object
// Singleton Pattern
object CarFactory{
    val cars = mutableListOf<Car>()

    fun makeCar(horsePower: Int) : Car {
        val car = Car(horsePower)
        cars.add(car)
        return car
    }
}

data class Car(val horsePower : Int)



fun main() {
    //Data Class 로 만든 티켓
    val ticketA = Ticket("KoreanAir", "JoyceHong", "2020-02-16", 14)
    val ticketB = TicketNormal("KoreanAir", "JoyceHong", "2020-02-16", 14)

    println(ticketA)
    println(ticketB)



    //val booktmp = Book()      //private constructor 라 객체 생성 불가능
    val book = Book.create()

    val bookId = Book.BookFactory.getId()

    println("${book.id} ${book.name}")



    //Object Pattern
    val car = CarFactory.makeCar(10)
    val car2 = CarFactory.makeCar(200)

    println(car)
    println(car2)
    println(CarFactory.cars.size.toString())

}
